project(containers)
cmake_minimum_required(VERSION 3.05)

include (GNUInstallDirs)

SET( SOURCE_DIR . )

# We support building both static and shared libraries
if (NOT DEFINED LIBRARY_TYPE)
set(LIBRARY_TYPE STATIC)
endif (NOT DEFINED LIBRARY_TYPE)

if (${LIBRARY_TYPE} STREQUAL STATIC)
add_definitions(-DENABLE_CONTAINERS_STANDALONE)
endif (${LIBRARY_TYPE} STREQUAL STATIC)

# Utility function for adding container modules
function (containers_add_module new_TARGET new_SRCS new_DEFS)
separate_arguments(new_DEFS)
add_definitions (${new_DEFS})
separate_arguments(new_SRCS)
if (${LIBRARY_TYPE} STREQUAL STATIC)
set (module_SRCS ${module_SRCS} ${new_SRCS} PARENT_SCOPE)
else ()
set(CMAKE_SHARED_LIBRARY_PREFIX "")
add_library (${new_TARGET} ${LIBRARY_TYPE} ${new_SRCS})
target_link_libraries (${new_TARGET} containers)
install (TARGETS ${new_TARGET} DESTINATION ${PLUGIN_DIR})
endif ()
endfunction()

# Make sure the compiler can find the necessary include files
include_directories (${SOURCE_DIR}/..)

# Needed for the container loader
set(PLUGIN_DIR plugins)
add_definitions(-DDL_PATH_PREFIX="${PLUGIN_DIR}/")

SET( GCC_COMPILER_FLAGS -Wall -g -O2 -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wcast-qual -Wwrite-strings -Wundef )
SET( GCC_COMPILER_FLAGS ${GCC_COMPILER_FLAGS} -fPIC -Wextra )#-Wno-missing-field-initializers )
SET( GCC_COMPILER_FLAGS ${GCC_COMPILER_FLAGS} -std=c99 -D_POSIX_C_SOURCE=200809L )
SET( GCC_COMPILER_FLAGS ${GCC_COMPILER_FLAGS} -Wno-missing-field-initializers )
SET( GCC_COMPILER_FLAGS ${GCC_COMPILER_FLAGS} -Wno-unused-value )

add_definitions( ${GCC_COMPILER_FLAGS} )

# Containers core library
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_io.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_io_helpers.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_codecs.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_utils.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_writer_utils.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_loader.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_filters.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_logging.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_uri.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_bits.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_list.c)
set(core_SRCS ${core_SRCS} ${SOURCE_DIR}/core/containers_index.c)
set(core_HEADERS ${core_HEADERS} ${SOURCE_DIR}/containers.h)
set(core_HEADERS ${core_HEADERS} ${SOURCE_DIR}/containers_codecs.h)
set(core_HEADERS ${core_HEADERS} ${SOURCE_DIR}/containers_types.h)
set(core_HEADERS ${core_HEADERS} ${SOURCE_DIR}/packetizers.h)
set(core_HEADERS ${core_HEADERS} ${SOURCE_DIR}/core/containers_io.h)

# Containers io library
option(DISABLE_IO_ALL "Disable all IO modules" OFF)
if (NOT DISABLE_IO_ALL OR DEFINED ENABLE_IO_FILE)
set(io_SRCS ${io_SRCS} ${SOURCE_DIR}/io/io_file.c)
add_definitions( -DENABLE_CONTAINER_IO_FILE )
endif ()
if (NOT DISABLE_IO_ALL OR DEFINED ENABLE_IO_NULL)
set(io_SRCS ${io_SRCS} ${SOURCE_DIR}/io/io_null.c)
add_definitions( -DENABLE_CONTAINER_IO_NULL )
endif ()
if (NOT DISABLE_IO_ALL OR DEFINED ENABLE_IO_NET)
set(io_SRCS ${io_SRCS} ${SOURCE_DIR}/io/io_net.c)
add_definitions( -DENABLE_CONTAINER_IO_NET )
endif ()
if (NOT DISABLE_IO_ALL OR DEFINED ENABLE_IO_PKTFILE)
set(io_SRCS ${io_SRCS} ${SOURCE_DIR}/io/io_pktfile.c)
add_definitions( -DENABLE_CONTAINER_IO_PKTFILE )
endif ()
if (NOT DISABLE_IO_ALL OR DEFINED ENABLE_IO_HTTP)
set(io_SRCS ${io_SRCS} ${SOURCE_DIR}/io/io_http.c)
add_definitions( -DENABLE_CONTAINER_IO_HTTP )
endif ()

# Containers net library
if (DEFINED MSVC)
set(net_SRCS ${net_SRCS} ${SOURCE_DIR}/net/net_sockets_common.c)
set(net_SRCS ${net_SRCS} ${SOURCE_DIR}/net/net_sockets_win32.c)
elseif (DEFINED LINUX OR DEFINED UNIX)
set(net_SRCS ${net_SRCS} ${SOURCE_DIR}/net/net_sockets_common.c)
set(net_SRCS ${net_SRCS} ${SOURCE_DIR}/net/net_sockets_bsd.c)
else (DEFINED MSVC)
set(net_SRCS ${net_SRCS} ${SOURCE_DIR}/net/net_sockets_null.c)
endif (DEFINED MSVC)
set(extra_net_SRCS net_sockets_win32.c net_sockets_win32.h net_sockets_null.c)
add_custom_target(containers_net_extra ALL
    COMMAND touch ${extra_net_SRCS}
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/net)

# Packetizers library
set(packetizers_SRCS ${packetizers_SRCS} ${SOURCE_DIR}/core/packetizers.c)
option(DISABLE_PACKETIZER_ALL "Disable all packetizer modules" OFF)
if (NOT DISABLE_PACKETIZER_ALL OR DEFINED ENABLE_PACKETIZER_MPGA)
set(packetizers_SRCS ${packetizers_SRCS} ${SOURCE_DIR}/mpga/mpga_packetizer.c)
endif ()
if (NOT DISABLE_PACKETIZER_ALL OR DEFINED ENABLE_PACKETIZER_MPGV)
set(packetizers_SRCS ${packetizers_SRCS} ${SOURCE_DIR}/mpgv/mpgv_packetizer.c)
endif ()
if (NOT DISABLE_PACKETIZER_ALL OR DEFINED ENABLE_PACKETIZER_PCM)
set(packetizers_SRCS ${packetizers_SRCS} ${SOURCE_DIR}/pcm/pcm_packetizer.c)
endif ()
if (NOT DISABLE_PACKETIZER_ALL OR DEFINED ENABLE_PACKETIZER_AVC1)
set(packetizers_SRCS ${packetizers_SRCS} ${SOURCE_DIR}/h264/avc1_packetizer.c)
endif ()
if (NOT DISABLE_PACKETIZER_ALL OR DEFINED ENABLE_PACKETIZER_NALU)
set(packetizers_SRCS ${packetizers_SRCS} ${SOURCE_DIR}/h264/nalu_parser.c)
endif ()

function (containers_link_library_if_static LIBTOLINK)
if (${LIBRARY_TYPE} STREQUAL STATIC)
target_link_libraries(containers ${LIBTOLINK})
endif (${LIBRARY_TYPE} STREQUAL STATIC)
endfunction()


# Container modules
option(DISABLE_CONTAINER_ALL "Disable all container modules" OFF)
include(mp4/CMakeLists.txt)
include(mpeg/CMakeLists.txt)
include(mpga/CMakeLists.txt)
include(binary/CMakeLists.txt)
include(mkv/CMakeLists.txt)
include(wav/CMakeLists.txt)
include(asf/CMakeLists.txt)
include(flash/CMakeLists.txt)
include(avi/CMakeLists.txt)
include(rtp/CMakeLists.txt)
include(rtpdump/CMakeLists.txt)
include(rtsp/CMakeLists.txt)
include(rcv/CMakeLists.txt)
include(rv9/CMakeLists.txt)
include(qsynth/CMakeLists.txt)
include(simple/CMakeLists.txt)
include(fsv/CMakeLists.txt)
include(raw/CMakeLists.txt)
include(dummy/CMakeLists.txt)
include(metadata/id3/CMakeLists.txt)

# The core library
add_library(containers ${LIBRARY_TYPE} ${core_SRCS} ${io_SRCS} ${net_SRCS} ${packetizers_SRCS} ${module_SRCS})
if (NOT ${LIBRARY_TYPE} STREQUAL STATIC)
target_link_libraries(containers dl)
endif ()
install(TARGETS containers DESTINATION lib)

install(FILES ${core_HEADERS} DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR}/containers)

option(DISABLE_TESTS "Disable tests" OFF)
if (NOT DISABLE_TESTS)
add_subdirectory(test)
endif (NOT DISABLE_TESTS)
